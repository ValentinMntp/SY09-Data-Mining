boxplot(crabs$CW[crabs$sp == "B"], crabs$CW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "red"), names = c("B", "O"), ylab = "nombre de crabes", notch = TRUE)
boxplot(crabs$CW[crabs$sp == "B"], crabs$CW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "red"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$CW[crabs$sp == "B"], crabs$CW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$CW[crabs$sp == "B"], crabs$CW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$FL[crabs$sp == "B"], crabs$FL[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$RW[crabs$sp == "B"], crabs$RW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$CL[crabs$sp == "B"], crabs$CL[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$BD[crabs$sp == "B"], crabs$BD[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "orange"), names = c("B", "O"), ylab = "nombre de crabes")
boxplot(crabs$CW[crabs$sp == "B"], crabs$CW[crabs$sp == "O"], main = "Ã‰tude de la variable CW en fonction des espÃ¨ces", col = c("blue", "red"), names = c("B", "O"), ylab = "nombre de crabes", notch = TRUE, outline = FALSE)
scatterplot(RW ~ CL | sex, data=data, main="Scatter Plot", labels=row.names(data),reg.line=FALSE, smoother=FALSE,pch = c(1, 1))
> groupe <­ gl(4,50,labels=c("BM","BF","OM","OF"))
> groupe <- gl(4,50,labels=c("BM","BF","OM","OF"))
groupe <- gl(4,50,labels=c("BM","BF","OM","OF"))
groupe
plot(crabsquant, col=crabs$sp)
plot(crabsquant, col=groupe)
plot(crabsquant/crabsquant[,3], col=groupe)
groupe <- gl(4,50,labels=c("BM","BF","OM","OF"))
plot(crabsquant, col=groupe)
plot(crabsquant/crabsquant[,1], col=groupe)
plot(crabsquant/crabsquant[,3], col=groupe)
plot(notes)
plot(notes$note.median)
plot(notes$note.median col=notes$correcteur.median)
plot(notes col=notes$correcteur.median)
plot(notes col=notes$specialite)
plot(notes, col=notes$specialite)
plot(notes$note.median, col=notes$specialite)
plot(notes$note.median, col=notes$correcteur.median)
plot(notes$note.median, col=notes$specialite)
hist(notes$resultat)
plot(notes$resultat)
plot(notes$resultat, col=notes$specialite)
plot(crabsquant, col=groupe)
plot(crabsquant/crabsquant[,3], col=groupe)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
names(moy.median) <- c("correcteur","moy.median")
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
median <- merge(moy.median, std.median)
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
final <- merge(moy.final, std.final)
correcteurs <- merge(median, final, all=T)
correcteurs
corr.acp <- correcteurs[-c(2,8),]
corr.acp
corr.acp[-1]
corr.acp[-1]
scale(corr.acp[-1], center =
scale(corr.acp[-1])
corr.acp[-1]
scale(corr.acp[-1])
scale(corr.acp[-1], center=TRUE)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
center <- scale(corr.acp[-1], center=TRUE, scale=FALSE)
center
View(center)
cov.wt(center, method="ML")
V <- cov.wt(center, method="ML")
V
eigen(V)
nelem(corr.acp[-1])
size(corr.acp[-1])
length(corr.acp[-1])
length(corr.acp)
corr.acp[-1]
View(notes)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
center <- scale(corr.acp[-1], center=TRUE, scale=FALSE)
colMeans(center)
colMeans(corr.acp[-1])
corr.acp[-1]-colMeans(corr.acp[-1])
center <- corr.acp[-1]-colMeans(corr.acp[-1])
center
corr.acp[-1]
colMeans(corr.acp)
colMeans(corr.acp[-1])
corr.acp[-1]-colMeans(corr.acp[-1])
scale(corr.acp[-1], center=TRUE, scale=FALSE)
scale(corr.acp[-1], center=TRUE, scale=TRUE)
scale(corr.acp[-1])
scale(corr.acp[-1], center=FALSE, scale=TRUE)
scale(corr.acp[-1], center=FALSE, scale=FALSE)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
colMeans(corr.acp[-1]-colMeans(corr.acp[-1]))
colMeans(scale(corr.acp[-1], center=TRUE, scale=FALSE))
scale(corr.acp[-1], center=TRUE, scale=FALSE)
corr.acp[-1]-colMeans(corr.acp[-1])
load("~/UTC/GI04/SY09/TP00/prodtrans.R")
centre()
load('~/UTC/GI04/SY09/TP00/prodtrans.R')
load('home/valentin/UTC/GI04/SY09/TP00/prodtrans.R')
load('/home/valentin/UTC/GI04/SY09/TP00/prodtrans.r')
load('/home/valentin/UTC/GI04/SY09/TP00/prodtrans.R')
centre <- function(X){
for(i in 1:ncol(X)){
X[,i] = X[,i]-mean(X[,i])
}
centre(corr.acp[-1])
centre <- centre(corr.acp[-1])
centre
}
centre <- function(X){
for(i in 1:ncol(X)){
X[,i] = X[,i]-mean(X[,i])
}
X
}
centre <- centre(corr.acp[-1])
centre
scale(corr.acp[-1], center=TRUE, scale=FALSE)
cov.wt(centre)
cov.wt(centre, method="ML")
V <- cov.wt(centre, method="ML")
eigen(V)
eigen(as.matrix(V))
V
eigen(V$cov)
diag <- eigen(V$cov)
diag
sum(diag$values)
diag$values[1]/sum(diag$values)*100
diag$values[2]/sum(diag$values)*100
(diag$values[1]+diag$values[2])/sum(diag$values)*100
diag$vectors
V*diag$vectors
center%*%diag$vectors
as.matrix(center)%*%diag$vectors
as.matrix(center)%*%diag$vectors
center
center[1]
V
eigen(V$cov)
diag
center[1]*diag$vectors[,1]
center[1]%*%t(diag$vectors[,1])
as.matrix(center[1])%*%t(diag$vectors[,1])
t(diag$vectors[,1])%*%as.matrix(center[1])
t(diag$vectors[,1])
as.matrix(center[1])
as.matrix(center[,1])
t(diag$vectors[,1])*as.matrix(center[1])
t(diag$vectors[,1])*center[1]
diag$vectors[,1]
diag$vectors
diag$vectors[,1]*center[,1]
diag$vectors[,1]
center[,1]
center
(diag$values[1]+diag$values[2])/sum(diag$values)*100
(diag$values[1]+diag$values[2]+diag$values[3])/sum(diag$values)*100
center%*%diag$vectors
as.matrix(center)%*%diag$vectors
as.matrix(center)%*%diag$vectors -> C
C
plot(C)
plot(C[1], C[2])
plot(C[1], C[3])
plot(C)
savehistory("~/UTC/GI04/SY09/TP01/.Rhistory")
save.image("~/UTC/GI04/SY09/TP01/.RData")
plot(crabsquent)
plot(crabsquant)
plot(crabsquant, col="crabs$sp")
plot(crabsquant, col=crabs$sp)
cor(crabsquant)
plot(crabsquant/crabsquant[,3], col=crabs$sp)
plot(crabsquant/crabsquant[,3], col=crabs$sex)
plot(crabsquant/crabsquant[,3], col=crabs$sp)
plot(crabsquant/crabsquant[,3], col=crabs$sp)
plot(crabsquant/crabsquant[,3], col=crabs$sex)
plot(crabsquant/crabsquant[,3], col=crabs$sp)
plot(crabsquant*crabsquant[,3], col=crabs$sp)
plot(crabsquant/crabsquant[,3], col=crabs$sp)
plot(crabsquant/crabsquant[,1], col=crabs$sp)
plot(crabsquant/crabsquant[,2], col=crabs$sp)
plot(crabsquant/crabsquant[,4], col=crabs$sp)
plot(crabsquant/crabsquant[,5], col=crabs$sp)
notes
notes
notes
corr.acp
corr.acp[-1]
princomp(corr.acp[-1])
corr.acp[-1]
mean(corr.acp[-1])
mean(corr.acp[2])
center
centre
centre
princomp(centre)
princomp(centre)
princomp(centre)
summary(princomp(centre))
loadings(princomp(centre))
acp_R <- princomp(centre)
loadings(acp_R)
centre
corr.acp
corr.acp[-1]
acp_R <- princomp(corr.acp[-1])
acp_R
acp_R$loadings
centre
loadings(acp_R)
prin$center
acp_R$center
acp_R
acp_R$n.obs
acp_R$scores
acp_R$loadings
loadings(acp_R, cutoff=FALSE)
loadings(acp_R, cutoff=0,00001)
loadings(acp_R, cutoff=0.00001)
loadings(acp_R, digits=3, cutoff=0.00001)
loadings(acp_R, digits=3, cutoff=0.01)
loadings(acp_R, digits=3, cutoff=0.1)
loadings(acp_R, digits = 3, cutoff=0.1)
loadings(acp_R, digits=3, cutoff=0.1, ...)
loadings(acp_R, digits=3, cutoff=0.1 ...)
loadings(acp_R, digits=3, cutoff=0.1)
loadings(acp_R)
loadings(acp_R cutoff=0,001)
loadings(acp_R, cutoff=0,001)
print(acp_R$loadings, cutoff=0,0001)
print(acp_R$loadings)
print(acp_R$loadings, cutoff=0,1)
print(acp_R$loadings, digit=3, cutoff=0,1)
print(acp_R$loadings, digit=3, cutoff=0,01)
crabsquant
centre(crabsquant)
load("~/UTC/GI04/SY09/TP00/prodtrans.R")
centre <- function(X){
for(i in 1:ncol(X)){
X[,i] = X[,i]-mean(X[,i])
}
X
}
centre(crabsquant)
crabsquant_center < centre(crabsquant)
crabsquant_center <- centre(crabsquant)
colMeans(crabsquant_center)
cov.wt(crabsquant_center, method="ML")
cov.wt(crabsquant_center, method="ML") -> V
V
V$cov
eigen(V$cov)
eigen(V$cov) -> diag
diag
princomp(crabsquant)
summary(princomp(crabsquant))
diag
diag$values/100*200
diag$values/100
diag$values/10
diag
princomp(crabsquant)
plot(princomp(crabsquant))
biplot(princomp(crabsquant))
biplot.princomp(crabsquant)
summary(princomp(crabsquant))
princomp(crabsquant)
princomp(crabsquant)^2
princomp(crabsquant)Â²
princomp(crabsquant)^2
princomp(crabsquant)
princomp(crabsquant) -> acp_crabsquant
acp_crabsquant$sdev
acp_crabsquant$sdev^2
loading(crabsquant)
loadings(crabsquant)
loadings(acp_crabsquant)
center
princomp(center)
princomp(center)$sdev
princomp(center)$sdev -> azerty
azety
azerty
azerty^2
eigen(center)
eigen(V)
eigen(V$cov)
library(MASS)
data(crabs)
crabsquant <- crabs[,4:8]
princomp(crabsquant)
princomp(crabsquant) -> acp_crabsquant
summary(acp_crabsquant)
acp_crabsquant$sdev^2 -> lambdas
loadings(acp_crabsquant)
loadings(acp_crabsquant)$loadings
loadings(acp_crabsquant) ->loadings()
loadings(acp_crabsquant) ->loadings
as.matrix(centre(crabsquant))%*%loadings -> C
crabsquant
princomp(crabsquant) -> acp_crabsquant
acp_crabsquant
acp_crabsquant$sdev
acp_crabsquant$sdev^2
loadings(acp_crabsquant)
print(loadings)
acp_crabsquant
print(loadings(acp_crabsquant))
print(loadings(acp_crabsquant), digit=1)
print(loadings(acp_crabsquant), digit=3, cutoff=0,1)
print(loadings(acp_crabsquant), digit=3, cutoff=0,1)
print(loadings(acp_crabsquant), digit=3, cutoff=0,1)
loadings(acp_crabsquant)
loadings(acp_crabsquant) -> test
test$Loadings
test
test*2
acp_crabsquant
lambda
lambdas
summary(lambdas)
summary(lambdas)
summary(princomp(crabsquant))
getwd()
setwd('./UTC/GI04/SY09/TP01')
getwd()
png(file = "img/biplot_acp_crabs.png")
biplot(acp_crabsquant, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
biplot(acp_crabsquant, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
png(file = "./img/biplot_acp_crabs.png")
biplot(acp_crabsquant, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
png(file = "./rapport/img/biplot_acp_crabs.png")
biplot(acp_crabsquant, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
biplot(acp_crabsquant, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "plots/biplot_acp2_crabs.png")
biplot(acp2, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp_crabsquant, main = "ReprÃ©sentation de l'ACP sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
library(MASS)
crabsquant = crabs[,4:8]
acp2 = princomp(crabsquant)
png(file = "rapport/img/plot_acp2_crabs.png")
plot(acp2, main = "")
dev.off()
plot(acp_crabsquant)
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main = "ReprÃ©sentation de la corrÃ©lation sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main = "ReprÃ©sentation de l'ACP sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp_crabsquant, main = "ReprÃ©sentation de l'ACP sans traitement")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
acp_crabsquant
biplot(acp_crabsquant)
crabsquant
crabsquant2 <- crabsquant/crabsquant[,3]
plot(crabsquant2)
princomp(crabsquant2) -> acp3
summary(acp3)
plot(acp3)
acp3$sdev^2
acp3
crabsquant2 <- crabsquant2[,-3]
crabsquant2
plot(crabsquant2)
princomp(crabsquant2) -> acp3
acp3
acp3$sdev
acp3$sdev^2
summary(acp3)
png(file = "rapport/img/biplot_acp3_crabs.png")
biplot(acp3, main = "ReprÃ©sentation de l'ACP aprÃ¨s dÃ©correlation")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
summary(acp3)
acp3$sdev
acp3$sdev^2
acp3$loadings
acp
acp3
acp3$scores
acp3
crabsquant2
plot(res)
plot(acp3)
biplot(acp3)
biplot(acp3, c(1,3))
biplot(acp3, c(1,2))
biplot(acp3, c(1,4))
biplot(acp3, c(2,4))
biplot(acp3, c(2,3))
biplot(acp3, c(1,2))
acp2
acp2$sdev^2
plot(acp2)
biplot(acp2)
biplot(acp2, c(1,2))
biplot(acp2, c(1,3))
biplot(acp2, c(1,4))
biplot(acp2, c(1,5))
biplot(acp2, c(1,2))
crabsquant2
plot(crabsquant2)
biplot(crabsquant2)
acp3
plot(acp3)
plot(acp_crabsquant)
biplot(acp_crabsquant)
acp3
acp_crabsquant
princomp(crabsquant)
plot(acp3)
biplot(acp3)
biplot(acp3[,2:3])
biplot(acp3[2])
biplot(acp3[2], acp3[3])
biplot(acp3[,2], acp3[,3])
biplot(acp3)
biplot(acp3[,])
biplot(acp3[,2:3])
biplot(acp3[,2:4])
biplot(acp3[,2])
plot(acp3[,2])
plot(acp3)
plot(acp3[2])
plot(acp3[2,])
plot(acp3[1,2])
acp3
acp3[Comp.2]
acp3["Comp.2"]
acp3[1]
acp3$sdev[1]
biplot(acp3$sdev)
biplot(acp3)
biplot(acp3$sdev[2], acp3$sdev[3])
biplot(acp3)
biplot(acp3, name="test")
biplot(acp3, main="test")
biplot(acp3, main="ReprÃ©sentation des crabes aprÃ¨s dÃ©corrÃ©lation")
biplot(acp3, main="ReprÃ©sentation des crabes aprÃ¨s dÃ©corrÃ©lation dans le plan factoriel")
biplot(acp3, main="ReprÃ©sentation des crabes aprÃ¨s dÃ©corrÃ©lation dans le plan factoriel")
png(file = "rapport/img/biplot_acp3_crabs.png")
biplot(acp3, main="ReprÃ©sentation des crabes aprÃ¨s dÃ©corrÃ©lation dans le plan factoriel")
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main="ReprÃ©sentation des crabes dans le plan factoriel")
dev.off()
png(file = "rapport/img/biplot_acp3_crabs.png")
biplot(acp3, main = "ReprÃ©sentation des crabes aprÃ¨s dÃ©correlation dans le plan factoriel")
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main="ReprÃ©sentation des crabes dans le plan factoriel")
dev.off()
png(file = "rapport/img/biplot_acp3_crabs.png")
biplot(acp3, main = "ReprÃ©sentation de l'ACP aprÃ¨s dÃ©correlation")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp2_crabs.png")
biplot(acp2, main = "ReprÃ©sentation des crabes dans le plan factoriel")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
png(file = "rapport/img/biplot_acp3_crabs.png")
biplot(acp3, main = "ReprÃ©sentation des crabes aprÃ¨s transformation dans le plan factoriel")
abline(lty = 1, a = 0, b = 0, col = 1)
abline(lty = 1, a = 0, b = 1000000, col = 1)
dev.off()
notes <- read.csv("sy02-p2016.csv", na.strings="", header=T)
notes$correcteur.median <- factor(notes$correcteur.median,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$correcteur.final <- factor(notes$correcteur.final,
levels=c("Cor1","Cor2","Cor3","Cor4","Cor5","Cor6","Cor7","Cor8"))
notes$niveau <- factor(notes$niveau, ordered=T)
notes$resultat <- factor(notes$resultat, levels=c("F","Fx","E","D","C","B","A"),
ordered=T)
plot(notes$note.median, notes$note.final)
plot(notes$note.median, notes$note.final)
corr(notes$note.median, notes$note.final)
cor(notes$note.median, notes$note.final)
cor(notes$note.median, notes$note.final)
crabsquant2
acp2
clean()
data("iris")
iris
iris
View(iris)
View(iris)
plot(iris)
plot(iris)
