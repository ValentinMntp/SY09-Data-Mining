plot(crabsquant/crabsquant[,1], col=groupe)
plot(crabsquant/crabsquant[,3], col=groupe)
plot(notes)
plot(notes$note.median)
plot(notes$note.median col=notes$correcteur.median)
plot(notes col=notes$correcteur.median)
plot(notes col=notes$specialite)
plot(notes, col=notes$specialite)
plot(notes$note.median, col=notes$specialite)
plot(notes$note.median, col=notes$correcteur.median)
plot(notes$note.median, col=notes$specialite)
hist(notes$resultat)
plot(notes$resultat)
plot(notes$resultat, col=notes$specialite)
plot(crabsquant, col=groupe)
plot(crabsquant/crabsquant[,3], col=groupe)
moy.median <- aggregate(note.median~correcteur.median, data=notes, FUN=mean)
names(moy.median) <- c("correcteur","moy.median")
std.median <- aggregate(note.median~correcteur.median, data=notes, FUN=sd)
names(std.median) <- c("correcteur","std.median")
median <- merge(moy.median, std.median)
moy.final <- aggregate(note.final~correcteur.final, data=notes, FUN=mean)
names(moy.final) <- c("correcteur","moy.final")
std.final <- aggregate(note.final~correcteur.final, data=notes, FUN=sd)
names(std.final) <- c("correcteur","std.final")
final <- merge(moy.final, std.final)
correcteurs <- merge(median, final, all=T)
correcteurs
corr.acp <- correcteurs[-c(2,8),]
corr.acp
corr.acp[-1]
corr.acp[-1]
scale(corr.acp[-1], center =
scale(corr.acp[-1])
corr.acp[-1]
scale(corr.acp[-1])
scale(corr.acp[-1], center=TRUE)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
center <- scale(corr.acp[-1], center=TRUE, scale=FALSE)
center
View(center)
cov.wt(center, method="ML")
V <- cov.wt(center, method="ML")
V
eigen(V)
nelem(corr.acp[-1])
size(corr.acp[-1])
length(corr.acp[-1])
length(corr.acp)
corr.acp[-1]
View(notes)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
center <- scale(corr.acp[-1], center=TRUE, scale=FALSE)
colMeans(center)
colMeans(corr.acp[-1])
corr.acp[-1]-colMeans(corr.acp[-1])
center <- corr.acp[-1]-colMeans(corr.acp[-1])
center
corr.acp[-1]
colMeans(corr.acp)
colMeans(corr.acp[-1])
corr.acp[-1]-colMeans(corr.acp[-1])
scale(corr.acp[-1], center=TRUE, scale=FALSE)
scale(corr.acp[-1], center=TRUE, scale=TRUE)
scale(corr.acp[-1])
scale(corr.acp[-1], center=FALSE, scale=TRUE)
scale(corr.acp[-1], center=FALSE, scale=FALSE)
scale(corr.acp[-1], center=TRUE, scale=FALSE)
colMeans(corr.acp[-1]-colMeans(corr.acp[-1]))
colMeans(scale(corr.acp[-1], center=TRUE, scale=FALSE))
scale(corr.acp[-1], center=TRUE, scale=FALSE)
corr.acp[-1]-colMeans(corr.acp[-1])
load("~/UTC/GI04/SY09/TP00/prodtrans.R")
centre()
load('~/UTC/GI04/SY09/TP00/prodtrans.R')
load('home/valentin/UTC/GI04/SY09/TP00/prodtrans.R')
load('/home/valentin/UTC/GI04/SY09/TP00/prodtrans.r')
load('/home/valentin/UTC/GI04/SY09/TP00/prodtrans.R')
centre <- function(X){
for(i in 1:ncol(X)){
X[,i] = X[,i]-mean(X[,i])
}
centre(corr.acp[-1])
centre <- centre(corr.acp[-1])
centre
}
centre <- function(X){
for(i in 1:ncol(X)){
X[,i] = X[,i]-mean(X[,i])
}
X
}
centre <- centre(corr.acp[-1])
centre
scale(corr.acp[-1], center=TRUE, scale=FALSE)
cov.wt(centre)
cov.wt(centre, method="ML")
V <- cov.wt(centre, method="ML")
eigen(V)
eigen(as.matrix(V))
V
eigen(V$cov)
diag <- eigen(V$cov)
diag
sum(diag$values)
diag$values[1]/sum(diag$values)*100
diag$values[2]/sum(diag$values)*100
(diag$values[1]+diag$values[2])/sum(diag$values)*100
diag$vectors
V*diag$vectors
center%*%diag$vectors
as.matrix(center)%*%diag$vectors
as.matrix(center)%*%diag$vectors
center
center[1]
V
eigen(V$cov)
diag
center[1]*diag$vectors[,1]
center[1]%*%t(diag$vectors[,1])
as.matrix(center[1])%*%t(diag$vectors[,1])
t(diag$vectors[,1])%*%as.matrix(center[1])
t(diag$vectors[,1])
as.matrix(center[1])
as.matrix(center[,1])
t(diag$vectors[,1])*as.matrix(center[1])
t(diag$vectors[,1])*center[1]
diag$vectors[,1]
diag$vectors
diag$vectors[,1]*center[,1]
diag$vectors[,1]
center[,1]
center
(diag$values[1]+diag$values[2])/sum(diag$values)*100
(diag$values[1]+diag$values[2]+diag$values[3])/sum(diag$values)*100
center%*%diag$vectors
as.matrix(center)%*%diag$vectors
as.matrix(center)%*%diag$vectors -> C
C
plot(C)
plot(C[1], C[2])
plot(C[1], C[3])
plot(C)
savehistory("~/UTC/GI04/SY09/TP01/.Rhistory")
save.image("~/UTC/GI04/SY09/TP01/.RData")
d_iris <- dist(iris2) # method="man" # is a bit better
hc_iris <- hclust(d_iris, method = "complete")
iris_species <- rev(levels(iris[,5]))
library(dendextend)
dend <- as.dendrogram(hc_iris)
# order it the closest we can to the order of the observations:
dend <- rotate(dend, 1:150)
# Color the branches based on the clusters:
dend <- color_branches(dend, k=3) #, groupLabels=iris_species)
# Manually match the labels, as much as possible, to the real classification of the flowers:
labels_colors(dend) <-
rainbow_hcl(3)[sort_levels_values(
as.numeric(iris[,5])[order.dendrogram(dend)]
)]
# We shall add the flower type to the labels:
labels(dend) <- paste(as.character(iris[,5])[order.dendrogram(dend)],
"(",labels(dend),")",
sep = "")
# We hang the dendrogram a bit:
dend <- hang.dendrogram(dend,hang_height=0.1)
# reduce the size of the labels:
# dend <- assign_values_to_leaves_nodePar(dend, 0.5, "lab.cex")
dend <- set(dend, "labels_cex", 0.5)
# And plot:
par(mar = c(3,3,3,7))
plot(dend,
main = "Clustered Iris data set
(the labels give the true flower species)",
horiz =  TRUE,  nodePar = list(cex = .007))
legend("topleft", legend = iris_species, fill = rainbow_hcl(3))
install.packages("dendextend")
matrix(0,10,2)
matrix(0,1,3)
matrix(0,2,7)
matrix(c(1,2,3))
matrix(c(1,2,3 ; 1,2,3 ; 1,2,3))
matrix(c(1,2,3;1,2,3;1,2,3))
matrix(c(1 2 3, 1 2 3, 1 2 3))
matrix(c(1 2 3))
getwd()
setwd(./UTC/GI04/SY09/TP03)
setwd(~/UTC/GI04/SY09/TP03)
setwd("~/UTC/GI04/SY09/TP03")
getwd()
setwd("./data")
getwd()
load("Pima.csv")
read.csv(pima.csv)
read.csv("pima.csv")
read.csv("Pima.csv")
read.csv("Pima.csv") -> pima
pima
Xapp <- pima(,-8)
Xapp <- pima[,-8]
Xapp
zapp <- pima[,8]
zapp
n <- dim(Xapp)[1]
n
p<- dim(Xapp)[2]
G <- unique(zapp)
g <- unique(G)
g
g <- length(G)
classAppartenance <- matrix(0,n,g)
classAppartenance
for (i in 1:n){classAppartenance[i, zapp[i]] <- 1}
classAppartenance
centroids <- matrix(0,g,p)
Xapp*classAppartenance[,1]
Xapp
Xapp*classAppartenance[,2]
?apply
pima
pima/2
classAppartenance
classAppartenance[,1]
sum(classAppartenance[,1])
ceuc.app(Xapp,zapp)
load(ceeuc.R)
getwd()
setwd("..")
setwd("fonctions-tp3")
load("ceeuc.R")
load("ceeuc.R")
source("ceuuc.R")
getwd()
ls()
lswd()
getwd()
source("ceeuc.R")
ceuc.app(Xapp,zapp)
ceuc.app(Xapp,zapp)
source("ceeuc.R")
ceuc.app(Xapp,zapp)
source("ceeuc.R")
source("ceeuc.R")
ceuc.app2(Xapp,zapp)
source("ceeuc.R")
ceuc.app(Xapp,zapp)
ceuc.app(Xapp,zapp) -> mu
mu
source("ceeuc.R")
ceuc.app(Xapp,zapp) -> mu
mu
matrix(0,200,1)
zapp
matrix(0,1,500)
type(zapp)
is.array(zapp)
is.matrix(zapp)
is.integer(zapp)
matrix(zapp)
source("ceeuc.R")
ceuc.val(mu, Xapp)
source("distXY.R")
ceuc.val(mu, Xapp)
rep(O,4)
rep(0,4)
rep(0,500)
zapp
source("distXY.R")
source("ceeuc.R")
ceuc.val(mu, Xapp)
distXY(as.matrix(Xtst),as.matrix(mu))
distXY(as.matrix(Xapp),as.matrix(mu))
distXY(as.matrix(Xapp),as.matrix(mu))
distXY(as.matrix(Xapp),as.matrix(mu)) -> res
res
?rank
rank(c(1,3,6))
rank(c(1,9,6))
matrix(1 2 3)
matrix(1, 2, 3)
matrix(2, 3)
matrix(2, 3,5)
rank(matrix(2, 3,5))
apply(matrix(2, 3,5),1,rank)
apply(matrix(2, 3,5),2,rank)
matrix( rnorm(N*M,mean=0,sd=1), N, M)
matrix( rnorm(N*M,mean=0,sd=1), 4, 3)
matrix( rnorm(12,mean=0,sd=1), 4, 3)
matrix( rnorm(12,mean=0,sd=1), 4, 3) -> test
apply(test,1,rank)
distXY(as.matrix(Xapp),as.matrix(mu)) -> res
res
apply(res,1,rank)
apply(res,2,rank)
res
Xtst <- Xapp
distXY(as.matrix(Xapp),as.matrix(Xtst))
distXY(as.matrix(Xapp),as.matrix(Xtst)) -> res2
res2
dim(res2)
apply(res2,1,rank)
mu
pima
Xapp
xapp
Xapp
Zapp
zapp
distXY(as.matrix(Xtst),as.matrix(Xapp)) -> res
res
dim(res)
apply(res,1,rank)
apply(res,1,order)
distXY(as.matrix(Xtst),as.matrix(Xapp)) -> res
apply(res,1,order)
source("distXY.R")
getwd()
read.csv("../data/Synth1-40.csv")
read.csv("../data/Synth1-40.csv") -> synth
synth
Xapp <- synth[,-3]
zapp <- synth[,3]
Xapp
Zapp
zapp
ceuc.app(Xapp,zapp)
ceuc.app(Xapp,zapp) -> mu
ceuc.val(mu = mu, Xapp)
distXY(as.matrix(Xapp),as.matrix(Xapp))
distXY(as.matrix(Xapp),as.matrix(Xapp)) -> res
res
apply(res,1,order)
apply(res,1,rank)
apply(res,1,rank)
apply(res,1,rank)
apply(res,1,order)
apply(res,1,rank)
apply(res,2,rank)
apply(res,1,rank)
apply(res,1,which.min)
apply(res[1],1,which.min)
apply(res[1,],1,which.min)
res[1,]
apply(res[1,],2,which.min)
dim(res[1,])
dim(res[1,])
dim(res[1:2,])
dim(res[1:3,])
sort.int(res[1,])
sort.int(res[1,], index.return = TRUE)
res
res
sort.int(res[1,])
sort.int(res[1,], index.return = TRUE)
sort.int(res[2,], index.return = TRUE)
sort.int(res[2,], index.return = TRUE)$ix[,2]
sort.int(res[2,], index.return = TRUE)$ix[2]
sort.int(res[2,], index.return = TRUE)$ix[1:2]
sort.int(res[2,], index.return = TRUE)$ix[1:3]
sort.int(res[2,], index.return = TRUE)$ix[1:K]
sort.int(res[2,], index.return = TRUE)$ix[1:5]
matrix(0,1,5)
matrix(0,1,5) -> neighbours
neighbours[1]
neighbours[1,]
neighbours[1,] <- sort.int(res[2,], index.return = TRUE)$ix[1:5]
neighbours[1,]
res(0,5)
rep(0,5)
neighbours[1]
neighbours[1,]
zapp(neighbours[1,1])
zapp[neighbours[1,1]]
zapp
count <- rep(0,5)
count
count[zapp[neighbours[1,1]]] = count[zapp[neighbours[1,1]]] +1
count
count[zapp[neighbours[1,2]]] = count[zapp[neighbours[1,2]]] +1
count[zapp[neighbours[1,3]]] = count[zapp[neighbours[1,3]]] +1
count[zapp[neighbours[1,4]]] = count[zapp[neighbours[1,4]]] +1
count[zapp[neighbours[1,5]]] = count[zapp[neighbours[1,5]]] +1
count
apply(count,1,max)
apply(count,1,which.max)
apply(count,2,which.max)
apply(count,1,which.max)
sort.int(count[1,])
sort.int(count)
count
which.max(count)
source("kppv.R")
zapp
kppv.val(Xapp,zapp,2,Xapp)
kppv.val(Xapp,zapp,2,Xapp) -> res
classes <- unique(zapp)
g <- length(classes)
K <- 2
count <- rep(0,K)
ntst <- dim(Xtst)[1]
predicted <- rep(O,ntst) #Predicted labels to be returned
kppv.val(Xapp,zapp,2,Xapp) -> res
source("kppv.R")
kppv.val(Xapp,zapp,2,Xapp)
source("kppv.R")
kppv.val(Xapp,zapp,2,Xapp)
source("kppv.R")
kppv.val(Xapp,zapp,2,Xapp)
zapp
kppv.val(Xapp,zapp,1,Xapp)
kppv.val(Xapp,zapp,3,Xapp)
nppv <- c(1,2,3,4,5)
nppb
nppv
synth
Xapp <- synth(1:20,)
Xapp <- synth[1:20,]
Xapp
Xtst <- synth[21:40,]
Xtst
kppv.val(Xapp, zapp, 2, Xts)
kppv.val(Xapp, zapp, 2, Xtst)
zapp
source("front.ceuc.R")
Xapp
synth
Xapp <- synth[1:2,]
Xapp <- synth[,-3]
zapp <- synth[,3]
ceuc.app(Xapp, zapp)
ceuc.app(Xapp, zapp) -> mu
ceuc.val(mu, Xapp)
front.ceuc(mu,Xapp,zapp)
front.ceuc(mu,Xapp,zapp)
source("front.kppv.R")
front.kppv(Xapp,zapp,2)
front.kppv(Xapp,zapp,2)
front.kppv(Xapp = xapp,zapp = zapp,2)
front.kppv(Xapp = xapp,zapp = zapp,2)
source("front.kppv.R")
front.kppv(Xapp = xapp,zapp = zapp,2)
front.kppv(Xapp = Xapp,zapp = zapp,2)
front.kppv(Xapp = xapp,zapp = zapp,2)
front.kppv(Xapp = Xapp,zapp = zapp,2)
cscsd
exists()
1+2
undebug(ls)
front.kppv(Xapp = Xapp,zapp = zapp,2)
source("front.kppv.R")
source("kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,2)
source("kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,2)
source("kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,2)
front.kppv(Xapp = Xapp,zapp = zapp,3)
front.kppv(Xapp = Xapp,zapp = zapp,4)
front.kppv(Xapp = Xapp,zapp = zapp,5)
front.kppv(Xapp = Xapp,zapp = zapp,3)
front.kppv(Xapp = Xapp,zapp = zapp,1)
front.kppv(Xapp = Xapp,zapp = zapp,9)
front.kppv(Xapp = Xapp,zapp = zapp,99)
front.kppv(Xapp = Xapp,zapp = zapp,39)
front.kppv(Xapp = Xapp,zapp = zapp,20)
front.kppv(Xapp = Xapp,zapp = zapp,3)
front.ceuc(mu,Xapp,zapp)
getwd()
setwd('..')
getwd()
png(file = "img/euclidian.png")
front.ceuc(mu,Xapp,zapp)
front.kppv(Xapp = Xapp,zapp = zapp,3)
dev.off()
front.kppv(Xapp = Xapp,zapp = zapp,3)
front.kppv(Xapp = Xapp,zapp = zapp,3)
getwd()
setwd('./fonctions-tp3')
source("front.kppv.R")
source("front.kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,3)
source("front.kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,3)
source("front.kppv.R")
front.kppv(Xapp = Xapp,zapp = zapp,3)
source("front.ceuc.R")
front.ceuc(mu,Xapp)
source("front.ceuc.R")
front.ceuc(mu,Xapp)
source("front.ceuc.R")
front.ceuc(mu,Xapp)
Xapp
mu <- ceuc.app(Xapp, zapp)
front.ceuc(mu,Xapp)
zapp
synth
synth
Xapp <- synth[-3]
zapp <- synth[3]
ceuc.app(Xapp, zapp)
ceuc.app(Xapp, zapp)
zapp
Xapp <- synth[,-3]
zapp <- synth[,3]
Xapp
zapp
ceuc.app(Xapp, zapp)
ceuc.app(Xapp, zapp) -> mu
ceuc.val(mu,Xapp)
front.ceuc(mu,Xapp,Zapp)
front.ceuc(mu,Xapp,zapp)
source("front.ceuc.R")
front.ceuc(mu,Xapp,zapp)
