setwd('UTC/GI04/NF26/TP04')
setwd('./UTC/GI04/NF26/TP04')
setwd('./UTC/GI04/SY09/TP04')
setwd('UTC/GI04/SY09/TP04')
getwd()
library(randomForest)
Donn <- read.csv("spam.csv", header=T)
X <- Donn[,1:57]
z <- Donn[,58]
Donn <- read.csv("../donnees/spam.csv", header=T)
X <- Donn[,1:57]
z <- Donn[,58]
X
fit <- randomForest(a~ ., data = lycee2, na.action = na.roughfix)
z
fit <- randomForest(z~ ., data = X, na.action = na.roughfix)
fit
print(fit)
fit$predicted
fit$terms
fit$call
fit$type
fit$predicted
fit$mse
fit$rsq
fit$oob.times
fit$importanceSD
fit <- randomForest(z~ ., data = X)
fit
library(adabag)
install.packages("adabag")
library(adabag)
install.packages("adabag")
spam.bag<-bagging(formula=is_spam~.,data=spambase.training)
summary(spam.bag)
library("adabag")
spam.bag<-bagging(formula=is_spam~.,data=spambase.training)
summary(spam.bag)
spam.bag<-bagging(formula=z.,data=X)
summary(spam.bag)
spam.bag<-bagging(formula=z.,data=X)
spam.bag<-bagging(formula=z~.,data=X)
spam.rf<-randomForest(z~.,data=X)
spam.rf
library(nutshell)
library(caret)
inTrain=createDataPartition(y=Donn$z,p=.7,list=F)
inTrain
Donn
inTrain=createDataPartition(y=Donn$z,p=.7,list=F)
spambase.training<-Donn[inTrain,]
spambase.training
spambase.validation<-Donn[-inTrain,]
spam.bag<-bagging(formula=z~.,data=spambase.training)
spambase.training
spam.rf<-randomForest(z~.,data=spambase.training)
spam.rf
table(actual=spambase.validation$z,predicted=predict(spam.rf,newdata=spambase.validation,type="class"))
data(spambase)
spam.rf
?ramdomforest
??randomforest
spam.rf<-randomForest(z~.,data=spambase.training)
spam.rf<-randomForest(x=spambase.training[,1:57], y=spambase.training$z)
spam.rf
spambase.training[,1:57]
spambase.training$z
which(spambase.training$z==0)
which(spambase.training$z==2
)
len(spambase.training)
size(spambase.training)
spambase.training
inTrain
spambase.training[spambase.training=="1"]<-'Spam'
spambase.training[spambase.training=="2"]<-'NoSpam'
spambase.training
spambase.validation[spambase.validation=="1"]<-'Spam'
spambase.validation[spambase.validation=="2"]<-'NoSpam'
spam.rf<-randomForest(x=spambase.training[,1:57], y=spambase.training$z)
spambase.validation[spambase.validation=="NoSpam"]<-2
spambase.training[spambase.training=="NoSpam"]<-2
spambase.training[spambase.training=="Spam"]<-1
spambase.validation[spambase.validation=="Spam"]<-1
spambase.training
spam.rf<-randomForest(x=spambase.training[,1:57], y=spambase.training$z)
inTrain=createDataPartition(y=Donn$z,p=.7,list=F)
spambase.training<-Donn[inTrain,]
spambase.validation<-Donn[-inTrain,]
spam.rf<-randomForest(x=spambase.training[,1:57], y=spambase.training$z)
spam.rf
class(spambase.training$z)
class(spambase.training$z.asfactor())
class(as.factor(spambase.training$z))
spam.rf<-randomForest(x=spambase.training[,1:57], y=as.factor(spambase.training$z))
sparm.rf
spam.rf
table(actual=spambase.validation$z,predicted=predict(spam.rf,newdata=spambase.validation,type="class"))
27/1224
19/1951
9/553
10/808
19/(553+808)
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
errFOREST(X,z,20)
source('~/UTC/GI04/SY09/TP03/fonctions-tp3/separ1.R')
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
errFOREST(X,z,20)
dim(X)
dim(X)[1]
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
errFOREST(X,z,20)
errFOREST(X,z,1)
z
X
z
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
Donn <- read.csv("../donnees/spam.csv", header=T)
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
errFOREST(Donn,1)
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
errFOREST(Donn,1)
errFOREST(Donn,20)
mean(errFOREST(Donn,20))
Donn
Donn[-1,]
Donn[,-1]
Donn <- Donn[,-1]
spambase.training
spambase.training <- spambase.training[,-1]
spambase.validation <- spambase.validation[,-1]
spambase.training
spam.rf<-randomForest(x=spambase.training[,1:57], y=as.factor(spambase.training$z))
spam.rf
table(actual=spambase.validation$z,predicted=predict(spam.rf,newdata=spambase.validation,type="class"))
48/514
25/793
errFOREST(Donn,20)
mean(errFOREST(Donn,20))
source('~/UTC/GI04/SY09/TP04/fonctions/TauxErreur.R')
